#+STARTUP: showall

#+TITLE:     Computational Modelling in Neuroscience
#+AUTHOR:    Paul Gribble
#+EMAIL:     paul@gribblelab.org
#+DATE:      Fall 2012
#+OPTIONS: toc:nil
#+LINK_UP: http://www.gribblelab.org/teaching.html
#+LINK_HOME: http://www.gribblelab.org/

-----
* Administrivia
- This is the homepage for Neuroscience 9520: Computational Modelling in Neuroscience
- Class will be Mondays, 2:00pm - 3:30pm, and Thursdays, 11:30am -
  1:00pm, in NSC 245A
- The instructor is Paul Gribble (email: paul [at] gribblelab [dot] org)
- course [[file:syllabus.pdf][syllabus.pdf]]
- We will use several chapters from a book on computational motor
  control: "The Computational Neurobiology of Reaching and Pointing"
  by Reza Shadmehr and Steven P. Wise, MIT Press, 2005. [ [[http://goo.gl/QKykK][google books
  link]] ] [ [[file:readings/SW_00_cover_info.pdf][cover info]] ]

-----
* Course Notes

0. [@0] [[file:0_Setup_Your_Computer.html][Setup Your Computer]]
1. [[file:1_Dynamical_Systems.html][Dynamical Systems]]
2. [[file:2_Modelling_Dynamical_Systems.html][Modelling Dynamical Systems]]
3. [[file:3_Modelling_Action_Potentials.html][Modelling Action Potentials]]
4. [[file:4_Computational_Motor_Control_Kinematics.html][Computational Motor Control: Kinematics]]
5. [[file:5_Computational_Motor_Control_Dynamics.html][Computational Motor Control: Dynamics]]
6. [[file:6_Computational_Motor_Control_Muscle_Models.html][Computational Motor Control: Muscle Models]]

-----
* Schedule & Topics

-----
** Sep 10: Introductions & course schedule
- lecture slides: [[file:lecture1.pdf][lecture1.pdf]]
- please read this: [[file:readings/Trappenberg1.pdf][Trappenberg1.pdf]]
- please read this: [[file:readings/OM1.pdf][OM1.pdf]] (1st Ed.) or [[http://grey.colorado.edu/CompCogNeuro/index.php?title=CCNBook/Intro][CCNBook/Intro]]
- your first assignment: [[file:assignment1.pdf][assignment1.pdf]] (due Sep 23)

** Sep 13: Getting your computer set up with Python & scientific libraries
- course notes [[file:0_Setup_Your_Computer.html][0: Setup Your Computer]]

-----
** Sep 17 : Modelling Dynamical Systems I
- course notes [[file:1_Dynamical_Systems.html][1: Dynamical Systems]]
- course notes [[file:2_Modelling_Dynamical_Systems.html][2: Modelling Dynamical Systems]]

** Sep 20: Modelling Dynamical Systems II
- more on dynamical systems
- [[file:assignment2.pdf][assignment2.pdf]] (due Sep 30)
- code example for using optimization: [[file:code/optimizer_example.py][optimizer\_example.py]]
- cool demo of [[http://www.youtube.com/watch?v=Klw7L0OZbFQ][synchronization of metronomes]] (and [[http://www.youtube.com/watch?v=kqFc4wriBvE][japanese version]]),
  plus [[https://github.com/paulgribble/metronomes][python code]] for simulating it

-----
** Sep 24, 27 : no class (Paul away)

-----
** Oct 1, 4 : Modelling Action Potentials - Hodgkin-Huxley models
- [[file:readings/ekeberg1991.pdf][Ekeberg et al. (1991)]] (please read this)
- optional: see the original Hodgkin & Huxley 1952 paper reprinted in
  1990: [[file:readings/HH1990.pdf][Hodgkin & Huxley 1952 (1990)]]
- optional: a chapter on [[file:readings/spiking_neuron_models.pdf][Spiking Neuron Models]] for a general overview
  of the field
- course notes [[file:3_Modelling_Action_Potentials.html][3: Modelling Action Potentials]]
- refresher slides on [[file:readings/action_potentials.pdf][action potentials]]
- YouTube videos on [[http://www.youtube.com/watch?v=7EyhsOewnH4][The Action Potential]] and [[http://www.youtube.com/watch?v=LXdTg9jZYvs][Voltage Gated Channels
  and the Action Potential]]
- [[file:assignment3.pdf][assignment3.pdf]] (due Oct 7) [[file:code/assignment3_params.py][assignment3\_params.py]]
- [[file:code/assignment2_sol.py][assignment2\_sol.py]]
- [[file:code/assignment3_sol.py][assignment3\_sol.py]]

-----
** Oct 8, 11 : no class (thanksgiving, SFN)

-----
** Oct 15, 18 : no class (SFN)

-----
** Oct 22, 25 : Computational Motor Control: Kinematics
- course notes: [[file:4_Computational_Motor_Control_Kinematics.html][4: Computational Motor Control: Kinematics]]
- read *at least two* of the papers listed in the course notes
- read Shadmehr & Wise book, [[file:readings/SW_18.pdf][Chapter 18]] and [[file:readings/SW_19.pdf][Chapter 19]]
- [[file:assignment4.pdf][assignment4.pdf]]
- [[file:code/minjerk.py][minjerk.py]]

-----
** Oct 29, Nov 1 : Computational Motor Control: Dynamics
- [[file:code/assignment4_sol.py][assignment4\_sol.py]]
- course notes: [[file:5_Computational_Motor_Control_Dynamics.html][5: Computational Motor Control: Dynamics]]
- read *at least two* of the papers listed in the course notes
- read Shadmehr & Wise book, [[file:readings/SW_20.pdf][Chapter 20]] and [[file:readings/SW_21.pdf][Chapter 21]] (and [[file:readings/SW_22.pdf][Chapter 22]]
  if you are interested in the topic)
- [[file:code/twojointarm.py][twojointarm.py]] utility functions and Python code for doing inverse
  and forward dynamics of a two-joint arm in a horizontal plane (no
  gravity) with external driving torques, and animating the resulting
  arm motion
-  [[file:code/twojointarm_game.py][twojointarm\_game.py]] : try your hand at this game in which you have
   to control a two-joint arm to hit as many targets as you can before
   time runs out. Use the [d,f,j,k] keys to control [sf,se,ef,ee]
   joint torques (s=shoulder, e=elbow, f=flexor, e=extensor). Spacebar
   will "reset" the arm to its home position, handy if your arm starts
   spinning out of control (though each time you use spacebar your
   score will be decremented by one). Start the game by typing =python
   twojointarm_game.py= at the command line. At the end of the game
   your score will be printed out on the command line.
- [[file:assignment5.pdf][assignment5.pdf]]
-----

** Nov 5, 8 : Computational Motor Control: Muscle Models
- [[file:code/assignment5_sol.py][assignment5\_sol.py]] and [[file:figs/assignment5_figures.pdf][assignment5\_figures.pdf]] : coming soon ...
- read Shadmehr & Wise book, [[file:readings/SW_07.pdf][Chapter 7]] and [[file:readings/SW_08.pdf][Chapter 8]] and supplementary
  documents: [[http://www.shadmehrlab.org/book/musclemodel.pdf][musclemodel.pdf]]
- course notes: [[file:6_Computational_Motor_Control_Muscle_Models.html][6: Computational Motor Control: Muscle Models]]
- assignment: catch up on readings.
- *note* no class on Thurs Nov 8.

-----
** Nov 12, 15 : Computational Models of Learning part 1
- some lecture slides: [[file:readings/nn_slides.pdf][nn\_slides.pdf]]
- Readings:
  - [[file:readings/Jain_1996_NNetTutorial.pdf][Artificial Neural Networks: A Tutorial]] Jain & Mao, 1996
  - [[file:readings/Trappenberg5.pdf][Trappenberg5.pdf]], [[file:readings/Trappenberg6.pdf][Trappenberg6.pdf]], [[file:readings/Robinson92.pdf][Robinson92.pdf]], [[file:readings/Mitchell4.pdf][Mitchell4.pdf]]
    (4.8 optional)
  - Optional: [[file:readings/Haykin0.pdf][Haykin0.pdf]],  [[file:readings/Haykin1.pdf][Haykin1.pdf]],  [[file:readings/Haykin4.pdf][Haykin4.pdf]]
  - tutorial: [[http://galaxy.agh.edu.pl/~vlsi/AI/backp_t_en/backprop.html][Principles of training multi-layer neural network using
    backpropagation]]
- A classic reference: McClelland & Rumelhart PDP books [[file:readings/PDP.pdf][PDP.pdf]],
  [[file:readings/PDP_Handbook.pdf][PDP\_Handbook.pdf]]
- [[http://www.cs.toronto.edu/~hinton/absps/sciam93.pdf][Simulating Brain Damage]]
- for a really nice overview of all sort of NNs, see: [[https://www.coursera.org/course/neuralnets][Neural Networks
  for Machine Learning]] (Geoff Hinton, Univ Toronto, Coursera online
  course)
- for thoughts about motor learning, read Shadmher & Wise book,
  [[file:readings/SW_24.pdf][Chapter 24]]
- Software: [[http://pybrain.org/][PyBrain]]
  - there is also this: [[http://leenissen.dk/fann/wp/help/installing-fann/][FANN: Fast Artificial Neural Network Library]]
- code examples:
  - [[file:code/xor_aima.py][xor\_aima.py]] from [[http://aima.cs.berkeley.edu/][Norvig & Russell's book]]
  - [[file:code/xor.py][xor.py]] my code, vectorized numpy matrices
  - [[file:code/xor_plot.py][xor\_plot.py]] same as above, plots during training to visualize network performance
  - [[file:code/xor_cg.py][xor\_cg.py]] my code, uses backprop to compute gradients and conjugate gradient descent to optimize weights
  - [[file:code/mnist.tgz][mnist.tgz]] uses PyBrain to learn MNIST dataset
- [[http://yann.lecun.com/exdb/mnist/][MNIST Database of handwritten digits]]
- [[http://arxiv.org/abs/1003.0358][Deep Big Simple Neural Nets Excel on Handwritten Digit Recognition]]
- [[file:readings/NeuralNetworks2.pdf][NeuralNetworks2.pdf]] slides

-----
** Nov 19, 22 : Computational Models of Learning part 2
- [[file:code/assignment6.py][assignment6.py]] and [[file:code/traindata.pickle][traindata.pickle]]
- [[file:readings/NeuralNetworks3.pdf][NeuralNetworks3.pdf]] slides
- more code demos of feedforward networks
  - MNIST example  [[file:code/mnist.tgz][mnist.tgz]]
  - vowel classification [[file:code/PetersonBarneyVowels.tgz][PetersonBarneyVowels.tgz]]
- recurrent neural networks ([[http://en.wikipedia.org/wiki/Recurrent_neural_network][wiki)]]
  - [[http://130.102.79.1/~mikael/papers/rn_dallas.pdf][A guide to recurrent neural networks and backpropagation]] (M. Boden)
  - [[http://www.bcl.hamilton.ie/~barak/papers/CMU-CS-90-196.pdf][Dynamic Recurrent Neural Networks]] (B.A. Pearlmutter)
  - [[http://minds.jacobs-university.de/sites/default/files/uploads/papers/ESNTutorialRev.pdf][A tutorial on training recurrent neural networks]] (H. Jaeger)
  - echo state networks [[http://www.scholarpedia.org/article/Echo_state_network][scholarpedia]]
  - papers:
    - [[file:readings/Wada_1993_NeuralNetworks.pdf][Wada, 1993]] A Neural Network Model for Arm Trajectory Formation
      Using Forward and Inverse Dynamics Models
    - [[file:readings/Lukashin_1993_BiolCybern.pdf][Lukashin, 1993]] A dynamical neural network model for motor
      cortical activity during movement: population coding of movement
      trajectories
    - [[file:readings/Pearlmutter_1989_NeuralComputation.pdf][Pearlmutter, 1989]] Learning State Space Trajectories in Recurrent
      Neural Networks
- intro to unsupervised learning
  - autoencoders [[http://en.wikipedia.org/wiki/Autoencoder][wiki]]
  - Hopfield nets [[http://en.wikipedia.org/wiki/Hopfield_net][wiki]]
  - Boltzmann machines [[http://en.wikipedia.org/wiki/Boltzmann_machine][wiki]] 
  - Restricted Bolztmann machines [[http://en.wikipedia.org/wiki/Restricted_Boltzmann_machine][wiki]]
- multi-layer generative networks
  - [[file:readings/Hinton2006Montreal.pdf][Hinton2006Montreal.pdf]]
  - [[file:readings/Hinton2007tics.pdf][Hinton2007tics.pdf]]
  - video: [[http://www.youtube.com/watch?v%3DAyzOUbkUf3M][The Next Generation of Neural Networks]]
  - [[http://www.cs.toronto.edu/~hinton/adi/index.htm][deep network digit demo]]

-----
** Nov 26, 29 : Computational Models of Learning part 3
- self-organizing maps [[http://en.wikipedia.org/wiki/Kohonen_map][wiki]], [[file:readings/AflaloGraziano2006.pdf][AflaloGraziano2006.pdf]]
- reinforcement learning [[http://en.wikipedia.org/wiki/Reinforcement_learning][wiki]], [[http://webdocs.cs.ualberta.ca/~sutton/book/ebook/the-book.html][Sutton & Barto book]]

-----
** Dec 3 : student presentations
- each of the 12 students registered in the course will present one
  paper from the literature in their research area in which a
  computational modelling approach was used to address a question
  about how the brain works.
- presentations are limited to *7 minutes each*! Note: this is
  difficult to pull off, you will have to practice your talk out
  loud. Also be careful to choose your slides carefully. There will be
  a timer and a loud gong.
- Question period will be limited to 1 to 2 minutes per talk.
- Each student giving a talk must also submit a short essay on their
  chosen paper. Your essay should follow the "Content and Format"
  style of the [[http://www.jneurosci.org/site/misc/ifa_features.xhtml]["Journal Club"]] feature in the Journal of
  Neuroscience. You can choose any paper you want, it doesn't have to
  be a J. Neurosci. paper and it doesn't have to have been published
  within the past 2 months.
- Essays are due Sunday Dec 9th, 2012, no later than 11:59pm
  EST. Please send your essay to me by email, as a single .pdf
  file. The filename should be =<lastname>_essay.pdf=
  (e.g. =gribble\_essay.pdf=).

-----
* Links

** Python Introductory Tutorials

- [[http://openbookproject.net/thinkcs/python/english2e/][How to Think Like a Computer Scientist: Learning with Python]]
- [[http://learnpythonthehardway.org/book/][Learn Python The Hard Way]]
- [[http://www.diveintopython.net/][Dive Into Python]]
- [[file:readings/SciCompPython.pdf][Introduction to Scientific Computing with Python]]
- [[http://www.pythontutor.com/][Online Python Tutor]]
- [[https://github.com/profjsb/python-bootcamp][Python Bootcamp]] (github)
- [[http://www.youtube.com/playlist?list=PLRdRinj2mDqsnazUsGeFq8Fi-2lL77vFF][Python Bootcamp August 2012]] (YouTube playlist)
- [[http://register.pythonbootcamp.info/agenda][Python Bootcamp August 2012]] (list of topics & downloads)

** Numpy / SciPy / Matplotlib

- [[http://youtu.be/vWkb7VahaXQ][Using Numpy Arrays to Perform Mathematical Operations in Python]]
  (youtube video)
- [[http://scipy-lectures.github.com/][Python Scientific Lecture Notes]]
- [[http://www.scipy.org/Plotting_Tutorial][SciPy Plotting Tutorial]]
- [[http://docs.scipy.org/doc/][Numpy and Scipy Documentation]]
- [[http://www.scipy.org/Tentative_Numpy_Tutorial][Numpy Tutorial]]
- [[http://scipy.org/Cookbook][SciPy Cookbook]]
- [[http://scipy.org/Getting_Started][SciPy Getting Started]]
- [[http://matplotlib.org/gallery.html][matplotlib gallery]]

** iPython

- [[http://ipython.org/videos.html][iPython videos]]
- [[http://youtu.be/2G5YTlheCbw][iPython in-depth: high productivity interactive and parallel python]]
  (youtube video) iPython Notebook stuff starts at about 1:15:40, and
  parallel programming stuff starts at around 2:13:00
- [[http://nbviewer.ipython.org/][IPython Notebook Viewer]]

** Machine Learning Resources
- [[http://yann.lecun.com/exdb/mnist/][The MNIST Database of handwritten digits]]
- [[http://archive.ics.uci.edu/ml/][UCI Machine Learning Repository]]
- [[http://cs.nyu.edu/~roweis/data.html][Some datasets for machine learning: digits, faces, text, speech]]
- [[http://www.dacya.ucm.es/jam/download.htm][Software tools for reinforcement learning, neural networks and robotics]]
- [[http://kasrl.org/jaffe.html][The Japanese Female Facial Expression (JAFFE) Database]]
- [[http://www.socsci.ru.nl:8180/RaFD2/RaFD?p=main][Radboud Faces Database]]
- [[http://mplab.ucsd.edu/wordpress/?page_id=48][Machine Perception Laboratory Demos]]
- [[http://mplab.ucsd.edu/grants/project1/free-software/MPTWebSite/introduction.html][Machine Perception Toolbox]]
- [[http://www.cs.toronto.edu/~hinton/][Geoff Hinton's Webpage]] (with lots of demos, tutorials, talks and
  papers on Neural Networks)
- [[http://www.cs.toronto.edu/~hinton/csc321/][Introduction to Neural Networks and Machine Learning]] (U of T course
  by Geoff Hinton)
- [[http://www.cnbc.cmu.edu/~mharm/research/tools/mikenet/][MikeNet Neural Network Simulator]] (C library)

-----

* These notes

These notes can be viewed (and downloaded) in their entirety from a
[[https://github.com][github]] repository here: [[https://github.com/paulgribble/CompNeuro][CompNeuro]]


#+STARTUP: showall

#+TITLE:     6. Computational Motor Control: Muscle
#+AUTHOR:    Paul Gribble & Dinant Kistemaker
#+EMAIL:     paul@gribblelab.org
#+DATE:      fall 2012
#+LINK_UP:http://www.gribblelab.org/compneuro/5_Computational_Motor_Control_Dynamics.html
#+LINK_HOME: http://www.gribblelab.org/compneuro/index.html

-----
[TABLE-OF-CONTENTS]
-----

* Introduction

Here we will add muscles with neural efferent inputs and afferent
feedback, to our arm model. We will start with very simplified models of muscle force and work up to more physiologically realistic models. For the purpose of easy demonstration and simulation we will revert back to a single-joint arm model.

* Modelling simple torque muscles: constant torque

In the previous section we built a model of the skeletal dynamics a
forearm. As a first step to implement "torque muscles", we will use a
simple dynamic equation of motion of a single joint arm in a vertical
plane, with gravity:

#+ATTR_HTML: width="400px" align="center"
#+CAPTION: Schematic of a simple one-joint arm in a vertical plane with one muscle
[[file:figs/onejointarm_muscle.png]]

\begin{equation}
I \ddot{\theta} = m g l_{z} \cos \theta + T_{m}
\end{equation}

where $m$ is the mass of the segment, $g$ is the gravitational
constant (9.81 m/s/s), $l_{z}$ is the distance of the centre of mass
from the joint, and $\theta$ and $\ddot{\theta}$ are joint angular
position and acceleration, respectively. The new term we are now
adding, $T_{m}$, is the net joint torque due to muscle contraction.

Here is what a simple Python function would look like for simulating these dynamics:

#+BEGIN_SRC python
def onejointmuscle(state,t,Tm):
  m = 1.65    # kg
  g = -9.81   # m/s/s
  l = 0.179   # metres
  I = 0.0779  # kg m**2
  a = state[0]
  ad = state[1]
  add = (m*g*lz*cos(a) + Tm) / I
  return [ad,add]
#+END_SRC

You can download a full program here that implements a simulation and animation of this version of the arm:

[[file:code/onejointmuscle_1.py][onejointmuscle\_1.py]]

** Questions

1. Play with the $T_{m}$ parameter until you arrive at a value that
   maintains the arm at an angle of 30 degrees.

2. What value of muscle torque $T_{m}$ is required to maintain the arm
   at 45 degrees?


* Modelling simple torque muscles: two antagonistic muscles

Now we add a second "muscle" so we have $T_{mf}$ from a "flexor"
muscle (like biceps brachii) and $T_{me}$ from an "extensor" muscle
(like triceps brachii).

#+ATTR_HTML: width="400px" align="center"
#+CAPTION: Schematic of a simple one-joint arm in a vertical plane with two antagonistic muscles
[[file:figs/onejointarm_muscle2.png]]

Now our dynamics equation looks like this:

\begin{equation}
I \ddot{\theta} = m g l_{z} \cos \theta + T_{mf} - T_{me}
\end{equation}

Note how the two muscles act to produce torque in opposite directions.

Here is a new version of the Python function:

#+BEGIN_SRC python
def onejointmuscle(state,t,Tmf,Tme):
  m = 1.65    # kg
  g = -9.81   # m/s/s
  lz = 0.179  # metres
  I = 0.0779  # kg m**2
  a = state[0]
  ad = state[1]
  add = (m*g*lz*cos(a) + Tmf - Tme) / I
  return [ad,add]
#+END_SRC

You can download a full program here that implements a simulation and animation of this version of the arm:

[[file:code/onejointmuscle_2.py][onejointmuscle\_2.py]]

** Questions

1. Say the initial position of the forearm is $\pi/4$ radians with
   zero initial velocity. What static muscle torques $T_{mf},T_{me}$
   are needed to make the arm stay put?

2. Using your answer from Question 1 as a starting point, what happens
   if you increase $T_{mf}$ and $T_{me}$ by the same amount (e.g. by
   1.0 Nm)?


* Modelling simple torque muscles: linear springs
 
A very coarse approximation of muscle behaviour is that the muscles
deliver a torque that depends linearly on joint angle. This is
essentially the same as a spring:

\begin{equation}
T_{m} = -k(\theta-\theta_{0})
\end{equation}

#+ATTR_HTML: width="400px" align="center"
#+CAPTION: Schematic of a simple one-joint arm in a vertical plane with two antagonistic spring-like muscles
[[file:figs/onejointarm_muscle3.png]]

Note that for simplicity we are ignoring muscle [[http://muscle.ucsd.edu/musintro/ma.shtml][moment arms]] and we are
assuming they are constant with respect to joint angle.

The $\theta_{0}$ parameter is the "rest length" angle for the elbow joint angle. This is the angle at which the muscles produce no force.

You may have noticed that our spring muscles can "push" as well as pull. To fix this we adjust the muscle equation a bit:

\begin{eqnarray}
T_{flex} &= &\left[ -k(\theta - \theta_{0}) \right]^{+} \\
T_{ext} &= &\left[ -k(\theta - \theta_{0}) \right]^{-}
\end{eqnarray}

The notation $y=\left[x\right]^{+}$ and $y=\left[x\right]^{-}$ means
that $y$ is $x$ when $x>0$ (and zero otherwise) or $-x$ when $x<0$ (or
zero otherwise), respectively.

So the equation of motion for linear spring-like muscles is:

\begin{equation}
I \ddot{\theta} = m g l_{z} \cos\theta + \left[ -k(\theta - \theta_{0}) \right]^{+} + \left[ -k(\theta - \theta_{0}) \right]^{-}
\end{equation}

Here is a Python function that implements this:

#+BEGIN_SRC python
def onejointmuscle(state,t,a0):
	m = 1.65    # kg
	g = -9.81   # m/s/s
	lz = 0.179  # metres
	I = 0.0779  # kg m**2
	k = -10.0   # Nm/rad
	a = state[0]
	ad = state[1]
	Tmf = max(k*(a-a0),0)
	Tme = min(k*(a-a0),0)
	add = (m*g*lz*cos(a) + Tmf + Tme) / I
	return [ad,add]
#+END_SRC

You can download a full program here that implements a simulation and animation of this version of the arm:

[[file:code/onejointmuscle_3.py][onejointmuscle\_3.py]]

** Questions

1. Play with the simulation found in [[file:code/onejointmuscle_3.py][onejointmuscle\_3.py]]. Vary the
   value of =k=. What happens to the motion of the arm?

2. Vary the value of =a0=. What happens?

3. How would you change the code so that each muscle had its own
   stiffness parameter =k= and its own rest angle =a0=?


* Modelling simple torque muscles: linear spring-dampers

A better approximation (yet still too coarse for good predictions
about realistic muscle behaviour) is to incorporate a [[http://en.wikipedia.org/wiki/Dashpot][damper]] in the
muscle. A damper is a mechanical unit that delivers an opposing force
that is proportional to velocity. It acts to "damp out" oscillations. Muscle force in a real muscle is also proportional to velocity, but in a more complex way, which we will see later. For now let's assume linear damping:

\begin{eqnarray}
T_{flex} &= &\left[ -k(\theta - \theta_{0}) + b \dot{\theta} \right]^{+} \\
T_{ext} &= &\left[ -k(\theta - \theta_{0}) + b \dot{\theta} \right]^{-}
\end{eqnarray}

#+ATTR_HTML: width="400px" align="center"
#+CAPTION: Schematic of a simple one-joint arm in a vertical plane with two antagonistic spring-like muscles with dampers
[[file:figs/onejointarm_muscle4.png]]

#+BEGIN_SRC python
def onejointmuscle(state,t,a0):
	m = 1.65    # kg
	g = -9.81   # m/s/s
	lz = 0.179  # metres
	I = 0.0779  # kg m**2
	k = -10.0   # Nm/rad
	b =  0.5    # Nms/rad
	a = state[0]
	ad = state[1]
	Tmf = max((k*(a-a0)) - (b*ad),0)
	Tme = min((k*(a-a0)) - (b*ad),0)
	add = (m*g*lz*cos(a) + Tmf + Tme) / I
	return [ad,add]
#+END_SRC

You can download a full program here that implements a simulation and animation of this version of the arm:

[[file:code/onejointmuscle_4.py][onejointmuscle\_4.py]]

** Questions

1. Play with the simulation found in [[file:code/onejointmuscle_4.py][onejointmuscle\_4.py]]. Vary the
   value of =b=. What happens to the motion of the arm?

2. Can you find a combination of =k=, =b= and =a0= that makes the arm
   rest in a stable equilibrium at $\theta = -\pi/6$ radians?


* Introduction to Hill-type muscle models




[ next ]

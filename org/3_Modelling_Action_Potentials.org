#+STARTUP: showall

#+TITLE:     3. Modelling Action Potentials
#+AUTHOR:    Paul Gribble & Dinant Kistemaker
#+EMAIL:     paul@gribblelab.org
#+DATE:      fall 2012
#+LINK_UP: http://www.gribblelab.org/compneuro/2_Modelling_Dynamical_Systems.html
#+LINK_HOME: http://www.gribblelab.org/compneuro/index.html
#+BIBLIOGRAPHY: refs plain option:-d limit:t

-----
[TABLE-OF-CONTENTS]
-----

* Introduction

In this section we will use a model of voltage-gated ion channels in a
single neuron to simulate action potentials. The model is based on the
work by Hodgkin & Huxley in the 1940s and 1950s
\cite{HH1952,HH1990}. A good reference to refresh your memory about
how ion channels in a neuron work is the Kandel, Schwartz & Jessel
book "Principles of Neural Science" \cite{kandel2000principles}.

To model the action potential we will use an article by Ekeberg et              
al. (1991) published in Biological Cybernetics
\cite{ekeberg1991}. When reading the article you can focus on the
first three pages (up to paragraph 2.3) and try to find answers to the
following questions:

- How many differential equations are there?
- What is the order of the system described in equations 1-9?
- What are the states and state derivatives of the system?

* Simulating the Hodgkin & Huxley model

Before we begin coding up the model, it may be useful to remind you of
a fundamental law of electricity, one that relates electrical
potential $V$ to electric current $I$ and resistance $R$ (or
conductance $G$, the reciprocal of resistance). This of course is
known as [[http://en.wikipedia.org/wiki/Ohm's_law][Ohm's law]]:

\begin{equation}
V = IR
\end{equation}

or 

\begin{equation}
V = \frac{I}{G}
\end{equation}

Our goal here is to code up a dynamical model of the membrane's
electric circuit including two types of ion channels: sodium and
potassium channels. We will use this model to better understand the
process underlying the origin of an action potential.

** The neuron model

#+ATTR_HTML: width="400px" align="center"
#+CAPTION: Schematic of Ekeberg et al. 1991 neuron model
[[file:figs/ekeberg_fig1.png]]

The figure above, adapted from Ekeberg et al., 1991
\cite{ekeberg1991}, schematically illustrates the model of a
neuron. In panel A we see a soma, and multiple dendrites. Each of
these can be modelled by an electrical "compartment" (Panel B) and the
passive interactions between them can be modelled as a pretty standard
electrical circuit (see [[http://en.wikipedia.org/wiki/Biological_neuron_model][Biological Neuron Model]] for more details about
compartmental models of neurons). In panel C, we see an expanded model
of the Soma from panel A. Here, a number of active ion channels are
included in the model of the soma.

For our purposes here, we will focus on the soma, and we will not
include any additional dendrites in our implementation of the
model. Thus essentially we will be modeling what appears in panel C,
and at that, only a subset.

In panel C we see that the soma can be modelled as an electrical
circuit with a sodium ion channel (Na), a potassium ion channel (K), a
calcium ion channel (Ca), and a calcium-dependent potassium channel
(K(Ca)). What we will be concerned with simulating, ultimately, is the
intracellular potential E.

*** Passive Properties

Equation (1) of Ekeberg is a differential equation describing the
relation between the time derivative of the membrane potential $E$ as
a function of the passive leak current through the membrane, and the
current through the ion channels. Note that Ekeberg uses $E$ instead
of the typical $V$ symbol to represent electrical potential.

\begin{equation}
\frac{dE}{dt} = \frac{(E_{leak}-E)G_{m} + \sum{\left(E_{comp}-E\right)}G_{core} + I_{channels}}{C_{m}}
\end{equation}

Don't panic, it's not actually that complicated. What this equation is
saying is that the rate of change of electrical potential across the
current (the left hand side of the equation, $\frac{dE}{dt}$) is equal
to the sum of a bunch of other terms, divided by membrane capacitance
$C_{m}$ (the right hand side of the equation). Recall from basic
physics that [[http://en.wikipedia.org/wiki/Capacitance][capacitance]] is a measure of the ability of something to
store an electrical charge.

The "bunch of other things" is a sum of three things, actually, (from
left to right): a passive leakage current, plus a term characterizing
the electrical coupling of different compartments, plus the currents
of the various ion channels. Since we are not going to be modelling
dendrites here, we can ignore the middle term on the right hand side
of the equation ($\sum{\left(E_{comp}-E\right)}G_{core}$) which
represents the sum of currents from adjacent compartments (we have
none).

We are also going to include in our model an external current
$I_{ext}$. This can essentially represent the sum of currents coming
in from the dendrites (which we are not explicitly modelling). It can
also represent external current injected in a [[http://en.wikipedia.org/wiki/Patch_clamp][patch-clamp]]
experiment. This is what we as experimenters can manipulate, for
example, to see how neuron spiking behaviour changes. So what we will
actually be working with is this:

\begin{equation}
\frac{dE}{dt} = \frac{(E_{leak}-E)G_{m} + I_{channels} + I_{ext}}{C_{m}}
\end{equation}

What we need to do now is unpack the $I_{channels}$ term representing
the currents from all of the ion channels in the model. Initially we
will only be including two, the potassium channel (K) and the sodium
channel (Na).

*** Sodium channels (Na)

The current through sodium channels that enter the soma are
represented by equation (2) in Ekeberg et al. (1991):

\begin{equation}
I_{Na} = (E_{Na} - E_{soma})G_{Na}m^{3}h
\end{equation}

The activation $m$ of the sodium channels is described by the
differential equation (3) in Ekeberg et al. (1991):

\begin{equation}
\frac{dm}{dt} = \alpha_{m}(1-m) - \beta_{m}m
\end{equation}



*** Potassium channels (K)

x

** Python code

The full code can be found here: [[file:code/ekeberg.py][ekeberg.py]].

We begin by setting up all of the model parameters (there are
many). We do this in a Python data type called a [[http://docs.python.org/tutorial/datastructures.html#dictionaries][dictionary]]. This is a
useful data type to parcel all of our parameters together. Unlike an
array or list, which we would have to index using integer values (and
then keep track of which one corresponded to which parameter), with a
dictionary, we can index into it using string labels.

#+BEGIN_SRC python
# ipython --pylab

# import some needed functions
from scipy.integrate import odeint

# set up a dictionary of parameters

E_params = {
	'E_leak' : -7.0e-2,
	'G_leak' : 3.0e-09,
	'C_m'    : 6.0e-11,
	'I_ext'  : 0*1.0e-10
}

Na_params = {
	'Na_E'          : 5.0e-2,
	'Na_G'          : 1.0e-6,
	'k_Na_act'      : 3.0e+0,
	'A_alpha_m_act' : 2.0e+5,
	'B_alpha_m_act' : -4.0e-2,
	'C_alpha_m_act' : 1.0e-3,
	'A_beta_m_act'  : 6.0e+4,
	'B_beta_m_act'  : -4.9e-2,
	'C_beta_m_act'  : 2.0e-2,
	'l_Na_inact'    : 1.0e+0,
	'A_alpha_m_inact' : 8.0e+4,
	'B_alpha_m_inact' : -4.0e-2,
	'C_alpha_m_inact' : 1.0e-3,
	'A_beta_m_inact'  : 4.0e+2,
	'B_beta_m_inact'  : -3.6e-2,
	'C_beta_m_inact'  : 2.0e-3
}

K_params = {
	'k_E'           : -9.0e-2,
	'k_G'           : 2.0e-7,
	'k_K'           : 4.0e+0,
	'A_alpha_m_act' : 2.0e+4,
	'B_alpha_m_act' : -3.1e-2,
	'C_alpha_m_act' : 8.0e-4,
	'A_beta_m_act'  : 5.0e+3,
	'B_beta_m_act'  : -2.8e-2,
	'C_beta_m_act'  : 4.0e-4
}

params = {
	'E_params'  : E_params,
	'Na_params' : Na_params,
	'K_params'  : K_params
}
#+END_SRC

The next bit of code is the ODE function itself.

#+BEGIN_SRC python
# define our ODE function

def neuron(state, t, params):
	"""
	 Purpose: simulate Hodgkin and Huxley model for the action potential using
	 the equations from Ekeberg et al, Biol Cyb, 1991.
	 Input: state ([E m h n] (ie [membrane potential; activation of
	          Na++ channel; inactivation of Na++ channel; activation of K+
	          channel]),
		t (time),
		and the params (parameters of neuron; see Ekeberg et al).
	 Output: statep (state derivatives).
	"""

	E = state[0]
	m = state[1]
	h = state[2]
	n = state[3]

	Epar = params['E_params']
	Na   = params['Na_params']
	K    = params['K_params']

	# external current (from "voltage clamp", other compartments, other neurons, etc)
	I_ext = Epar['I_ext']

	# calculate Na rate functions and I_Na
	alpha_act = Na['A_alpha_m_act'] * (E-Na['B_alpha_m_act']) / (1.0 - exp((Na['B_alpha_m_act']-E) / Na['C_alpha_m_act']))
	beta_act = Na['A_beta_m_act'] * (Na['B_beta_m_act']-E) / (1.0 - exp((E-Na['B_beta_m_act']) / Na['C_beta_m_act']) )
	dmdt = ( alpha_act * (1.0 - m) ) - ( beta_act * m )

	alpha_inact = Na['A_alpha_m_inact'] * (Na['B_alpha_m_inact']-E) / (1.0 - exp((E-Na['B_alpha_m_inact']) / Na['C_alpha_m_inact']))
	beta_inact  = Na['A_beta_m_inact'] / (1.0 + (exp((Na['B_beta_m_inact']-E) / Na['C_beta_m_inact'])))
	dhdt = ( alpha_inact*(1.0 - h) ) - ( beta_inact*h )

	# Na-current:
	I_Na =(Na['Na_E']-E) * Na['Na_G'] * (m**Na['k_Na_act']) * h

	# calculate K rate functions and I_K
	alpha_kal = K['A_alpha_m_act'] * (E-K['B_alpha_m_act']) / (1.0 - exp((K['B_alpha_m_act']-E) / K['C_alpha_m_act']))
	beta_kal = K['A_beta_m_act'] * (K['B_beta_m_act']-E) / (1.0 - exp((E-K['B_beta_m_act']) / K['C_beta_m_act']))
	dndt = ( alpha_kal*(1.0 - n) ) - ( beta_kal*n )
	I_K = (K['k_E']-E) * K['k_G'] * n**K['k_K']

	# leak current
	I_leak = (Epar['E_leak']-E) * Epar['G_leak']

	# calculate derivative of E
	dEdt = (I_leak + I_K + I_Na + I_ext) / Epar['C_m']
	statep = [dEdt, dmdt, dhdt, dndt]

	return statep
#+END_SRC

Next we run a simulation by setting up our initial states, and a time
array, and then calling =odeint()=. Note that we are injecting some
external current by changing the value of the
=params['E_params']['I_ext']= entry in the =params= dictionary.

#+BEGIN_SRC python
# simulate

# set initial states and time vector
state0 = [-70e-03, 0, 1, 0]
t = arange(0, 0.2, 0.001)

# let's inject some external current
params['E_params']['I_ext'] = 1.0e-10

# run simulation
state = odeint(neuron, state0, t, args=(params,))
#+END_SRC

Finally, we plot the results:

#+BEGIN_SRC python
# plot the results

figure(figsize=(8,12))
subplot(4,1,1)
plot(t, state[:,0])
title('membrane potential')
subplot(4,1,2)
plot(t, state[:,1])
title('Na2+ channel activation')
subplot(4,1,3)
plot(t, state[:,2])
title('Na2+ channel inactivation')
subplot(4,1,4)
plot(t, state[:,3])
title('K+ channel activation')
xlabel('TIME (sec)')
#+END_SRC

Here is what you should see:

#+ATTR_HTML: width="400px" align="center"
#+CAPTION: Spiking neuron simulation based on Ekeberg et al., 1991
[[file:figs/ekeberg1.png]]



* Next steps

x

[ next ]
